#!/usr/bin/env python
"""Make an IPython/Jupyter kernel from a hashdist profile.

Provide a kernel name and hashstack repo and commit,
and this will build a profile and register a kernelspec for that profile.

The profile must contain IPython >= 3,
and you must have IPython >=3 on your system as well.
"""

from __future__ import print_function

import argparse
import json
import os
import re
import shutil
import sys
import tempfile
from subprocess import check_call, check_output, CalledProcessError

from IPython.kernel import kernelspec

pjoin = os.path.join

_github_pat = re.compile(r'[^/]+/[^/]+')

HASHSTACK_REPO = "https://github.com/hashdist/hashstack.git"


def _unabbreviate_url(url):
    """Turn org/repo abbreviations into GitHub URLs."""
    if '://' in url or '@' in url:
        return url
    if os.path.exists(url):
        return url
    if _github_pat.match(url):
        url = 'https://github.com/' + _github_pat
    return url


def _ensure_yaml(name):
    """Given a name that may or may not end with .yaml, ensure it does."""
    if not name.lower().endswith(('.yml', '.yaml')):
        name = name + '.yaml'
    return name


def _no_yaml(name):
    """Given a name that may or may not end with .yaml, ensure it does."""
    if name.lower().endswith(('.yml', '.yaml')):
        name = os.path.splitext(name)[0]
    return name


def generate_kernel_yaml(kernel_name, commit, file, repo=HASHSTACK_REPO):
    """generates kernel.yaml file
    
    Parameters
    ----------
    kernel_name: str
        The name of the kernel. The file will be created as `kernel_name.yaml`.
    commit: str
        The git commit of the stack repo
    file: str
        The name of the file in the stack repo that the kernel should use for its profile.
    repo: str, optional
        The repo URL (default: hashdist/hashstack)
    
    Returns
    -------
    
    kernel_file_name: str
        The filename that we just created
    """
    import yaml
    
    kernel_file_name = os.path.abspath(_ensure_yaml(kernel_name))
    repo = _unabbreviate_url(repo)
    file = _ensure_yaml(file)
    
    print("Generating {kernel_file_name} from {repo}@{commit}[{file}]".format(**locals()))
    
    extends = [{
        'name': 'hashstack',
        'file': _ensure_yaml(file),
        'urls': [repo],
        'key': 'git:%s' % commit,
    }]
    with open(kernel_file_name, 'w') as f:
        yaml.dump({'extends': extends}, f)
    return kernel_file_name


def build_kernel(kernel_file_name, hit_args=None):
    """Build a kernel stack with `hit build`
    
    Extra args to hit build can be specified via hit_args.
    """
    print("Building %s" % kernel_file_name)
    cmd = ['hit', 'build']
    if hit_args:
        cmd.extend(hit_args)
    cmd.append(kernel_file_name)
    check_call(cmd)


class KernelExists(Exception):
    pass


def install_kernel(kernel_name, overwrite=False):
    """Install the kernel spec where IPython/Jupyter will find it"""
    python = pjoin(kernel_name, 'bin', 'python')
    print("Constructing kernelspec for %s" % python)
    out = check_output([python, __file__, kernel_name, '--in-profile'])
    kernel_spec_dir = out.decode('utf8').strip()
    
    spec_name = 'hashdist-%s' % kernel_name
    ksm = kernelspec.KernelSpecManager()
    try:
        ks = ksm.get_kernel_spec(spec_name)
    except KeyError:
        print(kernel_name, ksm.find_kernel_specs())
    else:
        if overwrite:
            shutil.rmtree(ks.resource_dir)
        else:
            raise KernelExists("Already have kernel at %s\nRename the kernel or re-run hit-kernel with --overwrite." % ks.resource_dir)
    
    print("Registering %s with ipython" % spec_name)
    check_call(['ipython', 'kernelspec', 'install', out, '--user'])
    # remote the temp
    shutil.rmtree(kernel_spec_dir)


def make_kernel_spec(kernel_name):
    """Make the Jupyter kernelspec, and put it in a temp dir
    
    Prints the resulting tempfile location to stdout.
    
    Called inside the profile.
    """
    ksm = kernelspec.KernelSpecManager()
    ks = ksm.get_kernel_spec('python')
    ks.display_name = 'hashdist: %s' % kernel_name.replace('_', ' ')
    td = tempfile.mkdtemp()
    kernel_dir = pjoin(td, 'hashdist-%s' % kernel_name)
    shutil.copytree(ks.resource_dir, kernel_dir)
    os.chmod(kernel_dir, 0o755)
    with open(pjoin(kernel_dir, 'kernel.json'), 'w') as f:
        json.dump(ks.to_dict(), f, indent=1)
    print(kernel_dir)


def die(e):
    print("ERROR: %s" % str(e).replace('\n', '\n       '), file=sys.stderr)
    sys.exit(1)


def main():
    p = argparse.ArgumentParser('hit-kernel',
        description=__doc__,
    )

    p.add_argument('kernel_name', type=str, default='my-kernel', help="""
        The name of the kernel. This will create a file called kernel_name.yaml,
        and build a hashdist profile in kernel_name/.
    """
    )
    p.add_argument('commit', nargs='?', type=str, help="""
        The git commit hash, specifying the repo version.
    """)
    p.add_argument('--file', type=str, default='kernel', help="""
        The name of the file in the hashstack repo to base the kernel on,
        e.g. 'darwin' or 'myproject'.
    """)
    p.add_argument('--repo', type=str, default=HASHSTACK_REPO, help="""
        The repo containing the hashstack. Default: the official hashstack repo.
    """)
    p.add_argument('--overwrite', action='store_true', help="""
        Overwrite the kernel if one already exists with the same name.
    """)
    
    p.add_argument('--in-profile', action='store_true', help="""
        Private, don't use.
    """)
    p.add_argument('--hit-args', nargs='*', help="""
        Extra args to pass to `hit build`
    """)
    
    opts= p.parse_args()
    if opts.in_profile:
        make_kernel_spec(opts.kernel_name)
    else:
        kernel_name = _no_yaml(opts.kernel_name)
        kernel_yaml = generate_kernel_yaml(kernel_name,
            commit=opts.commit, file=opts.file, repo=opts.repo)
        try:
            build_kernel(kernel_yaml, opts.hit_args)
        except CalledProcessError as e:
            die(e)
        try:
            spec_name = install_kernel(kernel_name, overwrite=opts.overwrite)
        except (KernelExists, CalledProcessError) as e:
            die(e)
        print("Installed kernel %s" % spec_name)


if __name__ == '__main__':
    main()
